<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.1" xml:id="cha.admin.security"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <title>Security</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
  <abstract>
   <para>
    This section introduces the security features of &productname;.
    This includes authentication, management of users and groups, and
    the configuration of audit log files.
   </para>
  </abstract>
 </info>
 <sect1 xml:id="sec.admin.security.auth.kubeconfig">
  <title>Access Control Overview</title>
  <para>
   &productname; provides role-based access control (RBAC) to perform
   authentication and authorization of activities performed against a
   &kube; cluster. &kube; uses several steps for access control.
   The steps in processing order are:
  </para>
  <variablelist>
   <varlistentry>
    <term>Authentication</term>
    <listitem>
     <para>
      The authentication confirms the identity of an user. The
      <emphasis>OpenID Connect</emphasis> (<emphasis>OIDC</emphasis>)
      implementation <literal>dex</literal> is used as an
      authentication provider by &kube;. <literal>dex</literal>
      connects to an LDAP server to look up user information. To
      authenticate against the cluster, the
      <filename>kubeconfig</filename> file is used. For details, refer
      to <xref linkend="sec.admin.kubernetes.install-kubectl" />.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Authorization</term>
    <listitem>
     <para>
      &productname; uses <emphasis>role-based access control</emphasis>
      (<emphasis>RBAC</emphasis>). For &kube;, RBAC defines which
      subjects can do which operations on API resources. Groups and
      users, called <emphasis>subjects</emphasis> in &kube;, are
      managed with LDAP. For details, refer to <xref linkend=
      "sec.admin.security.users" />. To define which operations, called
      <emphasis>verbs</emphasis> in &kube;, are allowed for subjects,
      refer to <xref linkend="sec.admin.security.role" />.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Admission</term>
    <listitem>
     <para>
      Admission controllers in &kube; can mutate and validate requests.
      For details, refer to <link xlink:href=
      "https://v1-9.docs.kubernetes.io/docs/reference/access-authn-authz/admission-controllers/"
      />.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   For details about access control in &kube;, refer to <link
   xlink:href=
   "https://v1-9.docs.kubernetes.io/docs/reference/access-authn-authz/controlling-access/"
   />.
  </para>
 </sect1>

 <sect1 xml:id="sec.admin.security.admin">
  <title>Administrator Accounts</title>
  <para>
   By default there are two administrator accounts added to openLDAP:
  </para>

  <variablelist>
   <varlistentry>
    <term>openLDAP admin user</term>
    <listitem>
     <para>
      <literal>cn=admin,dc=infra,dc=caasp,dc=local</literal>
     </para>
     <para>
      This is the "root" user for openLDAP and has full permissions to change
      credentials.
     </para>
     <para>
      When the instructions in this section ask for <literal>LDAP_ADMIN_PASSWORD</literal>
      they require the openLDAP admin password.
     </para>
     <para>
      You can retrieve the current password from the admin node.
     </para>
<screen>&prompt.user;<command>cat /var/lib/misc/infra-secrets/openldap-password</command>
c88a9c67056a74e0357befdff93f87bbe0904214
     </screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>&dashboard; admin user</term>
    <listitem>
     <para>
      <literal>uid=test,ou=People,dc=infra,dc=caasp,dc=local</literal>
      </para>
      <para>
       This account does not have privileges to change administrator passwords
       in openLDAP.
      </para>
      <para>
       The account is created by the user on first login to &dashboard;
       and consequently for configuring &productname;.
      </para>
    </listitem>
   </varlistentry>
   </variablelist>

  <sect2 xml:id="sec.admin.security.admin.ldap_password">
   <title>Changing openLDAP Admin User Password</title>
   <procedure>
    <title>Changing openLDAP Admin User Password</title>
    <step>
     <para>
      Log in to the admin node via SSH.
     </para>
    </step>
    <step>
     <para>
      Change the openLDAP admin password in the file
      <filename>/var/lib/misc/infra-secrets/openldap-password</filename>.
     </para>
<screen>&prompt.user;<command>echo <replaceable>new_password</replaceable> > /var/lib/misc/infra-secrets/openldap-password</command>
    </screen>
    </step>
    <step>
     <para>
      Restart openLDAP to activate the changes.
     </para>
<screen>&prompt.user;<command>docker stop $(docker ps -q -f name=ldap)</command>
</screen>
     <para>
      After about <literal>20</literal> seconds, the OpenLDAP container will be
      automatically restarted with the new root password. This will only replace
      the credentials for the openLDAP admin user and not affect any other
      user configurations.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec.admin.security.admin.velum_admin_password">
   <title>Changing &dashboard; Admin Password</title>
   <para>
    Changing the &dashboard; admin password must be done in the openLDAP
    container running on the admin node. You will need the openLDAP admin
    password that is stored on the admin node itself.
   </para>
  <procedure>
   <title>Changing &dashboard; Admin Password</title>
   <step>
    <para>
     Log in to the admin node via SSH.
    </para>
   </step>
   <step>
    <para>
     Open a shell session on the openLDAP container.
    </para>
<screen>&prompt.user;<command>docker exec -it $(docker ps -q -f name=ldap) /bin/bash</command>
    </screen>
   </step>
   <step>
    <para>
     Use <command>slappasswd</command> to generate a hashed and salted password
     string.
    </para>
<screen>&prompt.user;<command>slappasswd -n -s <replaceable>password</replaceable></command>
{SSHA}mU7vDqF+cyNQlnQ2bZyvY4oFfjX9uDm3
    </screen>
    <note>
     <para>
      By ommitting the <literal>-s &lt;password&gt;</literal> parameter, you
      will be prompted to enter a new secret instead of providing it through the
      input.
     </para>
    </note>
   </step>
   <step>
    <para>
     Set the new password. Replace <literal>new_password</literal>
     with the string you generated in the previous step.
    </para>

<screen>&prompt.user;<command>ldappasswd -H ldaps:// -D "cn=admin,dc=infra,dc=caasp,dc=local" \
-w $(cat /var/lib/misc/infra-secrets/openldap-password) \
uid=test,ou=People,dc=infra,dc=caasp,dc=local -s <replaceable>new_password</replaceable></command>
</screen>
   </step>
  </procedure>
 </sect2>
 </sect1>

 <sect1 xml:id="sec.admin.security.ldap_preparation">
  <title>Preparing LDAP Authentication</title>
  <para>
   To perform administrative tasks from a
   <replaceable>WORKSTATION</replaceable> on the <phrase role=
   "productname">LDAP</phrase> directory, retrieve the <phrase
   role="productname">OpenLDAP</phrase> administrator password and
   install the LDAP certificate.
  </para>
  <procedure>
   <step>
    <para>
     Retrieve the LDAP admin password. Note the password for later use.
    </para>
<screen>&prompt.root.admin;<command>cat /var/lib/misc/infra-secrets/openldap-password</command></screen>
   </step>
   <step>
    <para>
     Import the LDAP certificate to your local trusted certificate
     storage. On the &admin_node;, run:
    </para>
<screen>&prompt.root.admin;<command>docker exec -it $(docker ps | grep openldap | \
awk '{print $1}') cat /etc/openldap/pki/ca.crt > ~/ca.pem</command>
&prompt.root.admin;<command>scp ~/ca.pem root@<replaceable>WORKSTATION</replaceable>:/usr/share/pki/trust/anchors/ca-caasp.crt.pem</command></screen>
    <para>
     Replace <replaceable>WORKSTATION</replaceable> with the appropriate
     hostname for the workstation where you wish to run the LDAP queries.
    </para>
   </step>
   <step>
    <para>
     Then, on that workstation, run:
    </para>
<screen>&prompt.root;<command>update-ca-certificates</command></screen>
   </step>
  </procedure>
 </sect1>

 <sect1 xml:id="sec.admin.security.users">
  <title>Managing Users and Groups</title>
  <para>
   User information is stored in <phrase role="productname">OpenLDAP</phrase>
   running in a container on your &productname; &admin_node;. You can use
   standard LDAP administration tools for managing these users remotely. To do
   so, install the <package>openldap2</package> package on a computer in your
   network and make sure that computer can connect to the &admin_node; on port
   <literal>389</literal>.
  </para>

  <sect2 xml:id="sec.admin.security.users.add">
   <title>Adding New User</title>
   <para>
    By default, when you create the first user in &dashboard; during bootstrap
    of your cluster, that user is granted <literal>Cluster
    Administrator</literal> privileges within &kube;. You can add additional
    users with these rights by adding new entries into the LDAP directory.
   </para>
   <procedure>
    <step>
     <para>
      To add a new user, create a LDIF file like this:
     </para>
     <example xml:id="ex.admin.security.users.add">
      <title>LDIF File For a New User</title>
<screen>dn: uid=<replaceable>USERID</replaceable><co xml:id="co.admin.security.users.add.uid"/>,ou=People,dc=infra,dc=caasp,dc=local
objectClass: person
objectClass: inetOrgPerson
objectClass: top
uid: <replaceable>USERID</replaceable> <xref linkend="co.admin.security.users.add.uid" xrefstyle="select:label nopage"/>
userPassword: <replaceable>PASSWORD_HASH</replaceable> <co xml:id="co.admin.security.users.add.password"/>
givenname: <replaceable>FIRST_NAME</replaceable> <co xml:id="co.admin.security.users.add.firstname"/>
sn: <replaceable>SURNAME</replaceable> <co xml:id="co.admin.security.users.add.surname"/>
cn: <replaceable>FULL_NAME</replaceable> <co xml:id="co.admin.security.users.add.fullname"/>
mail: <replaceable>E-MAIL_ADDRESS</replaceable> <co xml:id="co.admin.security.users.add.email"/></screen>
      <calloutlist>
       <callout arearefs="co.admin.security.users.add.uid">
        <para>
         User ID (UID) of the new user. Needs to be unique.
        </para>
       </callout>
       <callout arearefs="co.admin.security.users.add.password">
        <para>
         The user's hashed password. Use <command>/usr/sbin/slappasswd</command>
         to generate the hash.
        </para>
       </callout>
       <callout arearefs="co.admin.security.users.add.firstname">
        <para>
         The user's first name
        </para>
       </callout>
       <callout arearefs="co.admin.security.users.add.surname">
        <para>
         The user's last name
        </para>
       </callout>
       <callout arearefs="co.admin.security.users.add.fullname">
        <para>
         The user's full name
        </para>
       </callout>
       <callout arearefs="co.admin.security.users.add.email">
        <para>
         The user's e-mail address. It is used as the login name to &dashboard;
         and &kube;.
        </para>
       </callout>
      </calloutlist>
     </example>
    </step>
    <step>
     <para>
      Populate your OpenLDAP server with this LDIF file:
     </para>
<screen>&prompt.user;<command>ldapadd -H ldap://<replaceable>ADMINISTRATION_NODE_FQDN</replaceable>:389 -ZZ \
-D cn=admin,dc=infra,dc=caasp,dc=local -w <replaceable>LDAP_ADMIN_PASSWORD</replaceable> -f <replaceable>LDIF_FILE</replaceable></command></screen>
    </step>
   </procedure>
  </sect2>

  <sect2>
   <title>Showing User Attributes</title>
   <para>
    To show the attributes of a user, use the <command>ldapsearch</command>
    command.
   </para>
<screen>&prompt.user;<command>ldapsearch -H ldap://<replaceable>ADMINISTRATION_NODE_FQDN</replaceable>:389 -ZZ \
    -D cn=admin,dc=infra,dc=caasp,dc=local -w <replaceable>LDAP_ADMIN_PASSWORD</replaceable> \
    -b uid=<replaceable>USERID</replaceable>,ou=People,dc=infra,dc=caasp,dc=local</command></screen>
  </sect2>

  <sect2 xml:id="sec.admin.security.users.change.group">
   <title>Changing User</title>
   <para>
    The following procedure details how to modify a user in the
    LDAP directory. The example LDIF files detail how to change a user
    password and add a user to the <literal>Administrators</literal>
    group. To modify other fields, use the the password example and
    replace <literal>userPassword</literal> with other field names.
   </para>
   <procedure>
    <step>
     <para>
      Create a LDIF file that contains the change to the LDAP directory.
     </para>
     <example xml:id="ex.admin.security.users.change_password">
      <title>Change User Password</title>
<screen>dn: uid=<replaceable>USERID</replaceable><co xml:id="co.admin.security.users.change-pw.uid"/>,ou=People,dc=infra,dc=caasp,dc=local
changetype: modify
replace: userPassword
userPassword: <replaceable>PASSWORD</replaceable><co xml:id="co.admin.security.users.change-pw.password"/></screen>
      <calloutlist>
       <callout arearefs="co.admin.security.users.change-pw.uid">
        <para>
         <replaceable>USERID</replaceable> with the user's ID.
        </para>
       </callout>
       <callout arearefs="co.admin.security.users.change-pw.password">
        <para>
         <replaceable>PASSWORD</replaceable> with the user's new hashed
         password. Use <command>/usr/sbin/slappasswd</command> to
         generate the hash.
        </para>
       </callout>
      </calloutlist>
     </example>
     <example xml:id="ex.admin.security.users.change_group">
      <title>Add User to Administrators Group</title>
<screen>dn: cn=Administrators,ou=Groups,dc=infra,dc=caasp,dc=local
changetype: modify
add: uniqueMember
uniqueMember: uid=<replaceable>USERID</replaceable><co xml:id="co.admin.security.users.add.admin"/>,ou=People,dc=infra,dc=caasp,dc=local</screen>
      <calloutlist>
       <callout arearefs="co.admin.security.users.add.admin">
        <para>
         <replaceable>USERID</replaceable> with the user's ID.
        </para>
       </callout>
      </calloutlist>
     </example>
    </step>
    <step>
     <para>
      Execute <command>ldapmodify</command>.
     </para>
<screen>&prompt.user;<command>ldapmodify -H ldap://<replaceable>ADMIN_NODE</replaceable>:389 -ZZ -D cn=admin,dc=infra,dc=caasp,dc=local \
-w <replaceable>LDAP_ADMIN_PASSWORD</replaceable> -f <replaceable>LDIF_FILE</replaceable></command></screen>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec.admin.security.users.delete">
   <title>Deleting User</title>
    <para>
     The following procedure details how to delete a user from the
     LDAP database.
    </para>
    <procedure>
     <step>
      <para>
       Create an LDIF file that contains that specifies the distinguished
       name of the entry and a deletion command.
      </para>
<screen>dn: uid=<replaceable>USER_ID</replaceable>,ou=People,dc=infra,dc=caasp,dc=local
changetype: delete</screen>
     </step>
     <step>
      <para>
       Execute <command>ldapmodify</command>.
      </para>
<screen>&prompt.user;<command>ldapmodify -H ldap://<replaceable>ADMIN_NODE</replaceable>:389 -ZZ -D uid=<replaceable>USER_ID</replaceable>,ou=People,dc=infra,dc=caasp,dc=local \
-w <replaceable>LDAP_ADMIN_PASSWORD</replaceable> -f <replaceable>LDIF_DELETE</replaceable></command></screen>
     </step>
    </procedure>
  </sect2>

  <sect2 xml:id="sec.admin.security.groups">
   <title>Adding New Group</title>
   <para>
    To grant users access to manage a single namespace in &kube;, first
    create your users as mentioned in <xref linkend=
    "sec.admin.security.users.add"/>. Then execute the following
    procedure.
   </para>
   <procedure>
    <step>
     <para>
       Create a LDIF file for a new group:
     </para>
     <example xml:id="ex.admin.security.groups">
      <title>LDIF File to Add a New Group</title>
<screen>dn: cn=<replaceable>group name</replaceable><co xml:id="co.admin.security.groups.cn"/>,ou=Groups,dc=infra,dc=caasp,dc=local
objectclass: top
objectclass: groupOfUniqueNames
cn: <replaceable>group name</replaceable><xref linkend="co.admin.security.groups.cn" xrefstyle="select:label nopage"/>
uniqueMember: uid=<replaceable>member1</replaceable>,<co xml:id="co.admin.security.groups.member"/>ou=People,dc=infra,dc=caasp,dc=local
uniqueMember: uid=<replaceable>member2</replaceable>,<xref linkend="co.admin.security.groups.member" xrefstyle="select:label nopage"/>ou=People,dc=infra,dc=caasp,dc=local
uniqueMember: uid=<replaceable>member3</replaceable>,<xref linkend="co.admin.security.groups.member" xrefstyle="select:label nopage"/>ou=People,dc=infra,dc=caasp,dc=local</screen>
      <calloutlist>
       <callout arearefs="co.admin.security.groups.cn">
        <para>
         The group's name.
        </para>
       </callout>
       <callout arearefs="co.admin.security.groups.member">
        <para>
         Members of the group. Repeat the <literal>uniqueMember</literal>
         attribute for every member of this group.
        </para>
       </callout>
      </calloutlist>
     </example>
    </step>
    <step>
     <para>
      Populate your <phrase role="productname">OpenLDAP</phrase> server
      with the LDIF file:
     </para>
<screen>&prompt.user;<command>ldapadd -H ldap://<replaceable>ADMINISTRATION_NODE_FQDN</replaceable>:389 -ZZ \
-D cn=admin,dc=infra,dc=caasp,dc=local -w <replaceable>LDAP_ADMIN_PASSWORD</replaceable> -f <replaceable>LDIF_FILE</replaceable></command></screen>
    </step>
   </procedure>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.admin.security.role">
  <title>Role Management</title>
  <para>
   &productname; uses <emphasis>role-based access control</emphasis>
   authorization for &kube;. Roles define, which
   <emphasis>subjects</emphasis> (users or groups) can use which
   <emphasis>verbs</emphasis> (operations) on
   <emphasis>resources</emphasis>. The following sections provide an
   overview of resources, verbs and how to create roles. Roles can
   then be assigned to users and groups.
  </para>
  <sect2 xml:id="sec.admin.security.role.verb">
   <title>List of Verbs</title>
   <para>
    This section provides an overview of the most common
    <emphasis>verbs</emphasis> (operations) used for defining roles.
    Verbs correspond to sub-commands of <command>kubectl</command>.
   </para>
   <variablelist>
    <varlistentry>
     <term>create</term>
     <listitem>
      <para>
       Create a resource.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>delete</term>
     <listitem>
      <para>
       Delete resources.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>deletecollection</term>
     <listitem>
      <para>
       Delete a collection of CronJob.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>get</term>
     <listitem>
      <para>
       Display individual resource.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>list</term>
     <listitem>
      <para>
       Display collections.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>patch</term>
     <listitem>
      <para>
       Update an API object in place.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>proxy</term>
     <listitem>
      <para>
       Allows running &kubectl; in a mode where it acts as a reverse
       proxy.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>update</term>
     <listitem>
      <para>
       Update fields of a resource, for example annotations or labels.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>watch</term>
     <listitem>
      <para>
       Watch resource.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
  <sect2 xml:id="sec.admin.security.role.resource">
   <title>List of Resources</title>
   <para>
    This section provides an overview of the most common
    <emphasis>resources</emphasis> used for defining roles.
   </para>
   <variablelist>
    <varlistentry>
     <term>Autoscaler</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://v1-9.docs.kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/"
       />
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>ConfigMaps</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://v1-9.docs.kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/"
       />
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Cronjob</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://v1-9.docs.kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/"
       />
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>DaemonSet</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://v1-9.docs.kubernetes.io/docs/concepts/workloads/controllers/daemonset/"
       />
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Deployment</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://v1-9.docs.kubernetes.io/docs/concepts/workloads/controllers/deployment/"
       />
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Ingress</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://v1-9.docs.kubernetes.io/docs/concepts/services-networking/ingress/"
       />
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Job</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://v1-9.docs.kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/"
       />
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Namespace</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://v1-9.docs.kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
       />
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Node</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://v1-9.docs.kubernetes.io/docs/concepts/architecture/nodes/"
       />
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Pod</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://v1-9.docs.kubernetes.io/docs/concepts/workloads/pods/pod-overview/"
       />
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>PV</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://v1-9.docs.kubernetes.io/docs/concepts/storage/persistent-volumes/"
       />
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Secrets</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://v1-9.docs.kubernetes.io/docs/concepts/configuration/secret/"
       />
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Service</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://v1-9.docs.kubernetes.io/docs/concepts/services-networking/service/"
       />
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>ReplicaSets</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://v1-9.docs.kubernetes.io/docs/concepts/workloads/controllers/replicaset/"
       />
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
  <sect2 xml:id="sec.admin.security.role.create">
   <title>Create Role</title>
   <para>
    Roles are defined in YAML files. To apply role definitions to
    &kube;, use <command>kubectl apply -f
    <replaceable>YAML_FILE</replaceable></command>. The following
    examples provide an overview about different use cases of roles.
   </para>
   <example>
    <title>Simple Role for Core Resource</title>
    <para>
     This example allows to <literal>get</literal>, <literal>watch</literal>
     and <literal>list</literal> all <literal>pods</literal> in the
     namespace <literal>default</literal>.
    </para>
    <screen>kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: view-pods<co xml:id="co.admin.security.role.example1.name"/>
  namespace: default<co xml:id="co.admin.security.role.example1.namespace"/>
rules:
- apiGroups: [""]<co xml:id="co.admin.security.role.example1.apigroups"/>
  resources: ["pods"]<co xml:id="co.admin.security.role.example1.resources"/>
  verbs: ["get", "watch", "list"]<co xml:id="co.admin.security.role.example1.verbs"/></screen>
    <calloutlist>
       <callout arearefs="co.admin.security.role.example1.name">
        <para>
         Name of the role. This is required to associate the rule with
         a group or user. For details, refer to <xref linkend="sec.admin.security.role.create_binding" />.
        </para>
       </callout>
       <callout arearefs="co.admin.security.role.example1.namespace">
        <para>
         Namespace the new group should be allowed to access. Use
         <literal>default</literal> for &kube;' default namespace.
        </para>
       </callout>
       <callout arearefs="co.admin.security.role.example1.apigroups">
        <para>
         &kube; API groups. Use <literal>""</literal> for the core group
         <literal>rbac.authorization.k8s.io</literal>.
        </para>
       </callout>
       <callout arearefs="co.admin.security.role.example1.resources">
        <para>
         &kube; resources. For a list of available resources, refer to
         <xref linkend="sec.admin.security.role.resource" />.
        </para>
       </callout>
       <callout arearefs="co.admin.security.role.example1.verbs">
        <para>
         &kube; verbs. For a list of available verbs, refer to
         <xref linkend="sec.admin.security.role.verb" />.
        </para>
       </callout>
    </calloutlist>
   </example>
   <example>
    <title>Clusterwide Creation of Pods</title>
    <para>
     This example allows to <literal>create</literal>
     <literal>pods</literal> clusterwide. Note the
     <literal>ClusterRole</literal> value for <option>kind</option>.
    </para>
    <screen>kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: admin-create-pods<co xml:id="co.admin.security.role.example2.name"/>
rules:
- apiGroups: [""]<co xml:id="co.admin.security.role.example2.apigroups"/>
  resources: ["pods"]<co xml:id="co.admin.security.role.example2.resources"/>
  verbs: ["create"]<co xml:id="co.admin.security.role.example2.verbs"/></screen>
    <calloutlist>
       <callout arearefs="co.admin.security.role.example2.name">
        <para>
         Name of the role. This is required to associate the rule with
         a group or user. For details, refer to <xref linkend="sec.admin.security.role.create_binding" />.
        </para>
       </callout>
       <callout arearefs="co.admin.security.role.example2.apigroups">
        <para>
         &kube; API groups. Use <literal>""</literal> for the core group
         <literal>rbac.authorization.k8s.io</literal>.
        </para>
       </callout>
       <callout arearefs="co.admin.security.role.example2.resources">
        <para>
         &kube; resources. For a list of available resources, refer to
         <xref linkend="sec.admin.security.role.resource" />.
        </para>
       </callout>
       <callout arearefs="co.admin.security.role.example2.verbs">
        <para>
         &kube; verbs. For a list of available verbs, refer to
         <xref linkend="sec.admin.security.role.verb" />.
        </para>
       </callout>
    </calloutlist>
   </example>
  </sect2>
  <sect2 xml:id="sec.admin.security.role.create_binding">
   <title>Create Role Bindings</title>
   <para>
    To bind a group or user to a rule, create a YAML file that contains
    the role binding description. Then apply the binding with
    <command>kubectl apply -f
    <replaceable>YAML_FILE</replaceable></command>. The following
    examples provide an overview about different use cases of role
    bindings.
   </para>
   <example xml:id="ex.admin.security.groups.role">
    <title>Binding a Group to a Role</title>
    <para>
     This example shows how to bind a group to a defined role.
    </para>
<screen>kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: <replaceable>ROLE_BINDING_NAME</replaceable><co xml:id="co.admin.security.groups.role-binding-name"/>
  namespace: <replaceable>NAMESPACE</replaceable><co xml:id="co.admin.security.groups.role-namespace"/>
subjects:
- kind: Group
  name: <replaceable>LDAP_GROUP_NAME</replaceable><co xml:id="co.admin.security.groups.ldap-group-name"/>
  apiGroup: rbac.authorization.k8s.io
roleRef:
- kind: Role
  name: <replaceable>ROLE_NAME</replaceable><co xml:id="co.admin.security.groups.role-name"/>
  apiGroup: rbac.authorization.k8s.io</screen>
    <calloutlist>
     <callout arearefs="co.admin.security.groups.role-binding-name">
      <para>
       Defines a name for this new role binding.
      </para>
     </callout>
     <callout arearefs="co.admin.security.groups.role-namespace">
      <para>
       Name of the namespace for which the binding applies.
      </para>
     </callout>
     <callout arearefs="co.admin.security.groups.role-name">
      <para>
       Name of the role used. For defining rules, refer to
       <xref linkend="sec.admin.security.role.create" />.
      </para>
     </callout>
     <callout arearefs="co.admin.security.groups.ldap-group-name">
      <para>
       Name of the LDAP group to which this binding applies. For
       creating groups, refer to <xref linkend=
       "sec.admin.security.groups" />.
      </para>
     </callout>
    </calloutlist>
   </example>
  </sect2>
 </sect1>

 <sect1 xml:id="sec.admin.security.certs">
  <title>Certificates</title>
  <para>
   During the installation of &productname;, a CA (Certificate Authority)
   certificate is generated; that is then used to authenticate and verify all
   communications. The process also creates and distributes client certificates
   for the components.
  </para>
  <para>
   Communication is secured with TLS v1.2 using the <literal>AES 128 CBC</literal>
   cipher.
  </para>
  <para>
   All client certificates are 4096 Bit RSA encrypted.
  </para>
  <para>
   Certificates are located in
   <filename>/etc/pki</filename>
   on each cluster node.
  </para>

  <sect2 xml:id="sec.admin.security.certs.renewal">
   <title>Certificate Renewal</title>
   <para>
    The CA certificate is valid for <literal>3650</literal> days (10 years)
    by default.
   </para>
   <para>
    The client certificates are valid for <literal>365</literal> days (1 year)
    by default.
   </para>
   <para>
    All certificates have a renewal period of <literal>90</literal> days before
    expiration. If orchestration of the cluster is run during that period, the
    certificates which are about to expire are renewed automatically.
   </para>
   <para>
    To manually renew certificates, refer to
    <xref linkend="sec.admin.troubleshooting.replace_certificates"/>.
   </para>
   <important>
    <title>Renewing Expired Certificates</title>
    <para>
     If for whatever reason any of the certificates have failed to renew, please
     log in to &dashboard; and navigate to <guimenu>Settings</guimenu>. Click
     the <guimenu>Apply changes</guimenu> button. This will force a refresh of
     the cluster settings and any expired certificates will be renewed.
    </para>
    <para>
     If this still fails, you can replace the certificates manually. Refer to:
     <xref linkend="sec.admin.troubleshooting.replace_certificates"/>.
    </para>
   </important>
  </sect2>

  <sect2 xml:id="sec.admin.security.certs.installing_rootca">
   <title>Obtaining and Installing Root CA Certificate</title>
   <procedure>
    <step>
     <para>
      Obtain the root CA certificate from any node in your cluster with
      <command>scp</command>.
     </para>
     <screen>&prompt.user;<command>scp NODE:/etc/pki/trust/anchors/<replaceable>SUSE_CaaSP_CA</replaceable>.crt .</command>
     </screen>
    </step>
    <step>
     <para>
      Copy the Root CA certificate file into the trust anchors directory
      <filename>/etc/pki/trust/anchors/</filename>.
     </para>
     <screen>&prompt.sudo;cp
      <replaceable>SUSE_CaaSP_CA</replaceable>.crt /etc/pki/trust/anchors/
     </screen>
    </step>
    <step>
     <para>
      Update the cache for known CA certificates.
     </para>
     <screen>&prompt.sudo;<command>update-ca-certificates</command>
     </screen>
    </step>
   </procedure>
   <note>
    <title>Operating System Specific Instructions</title>
    <para>
     The location of the trust store anchors directory or the command to refresh
     the CA certificates cache might vary depending on your operating system.
    </para>
    <para>
     Please consult the official documentation for your operating system to find
     the respective alternatives.
    </para>
   </note>
  </sect2>
 </sect1>

 <sect1 xml:id="sec.admin.security.pod_policies">
  <title>Pod Security Policies</title>
  <para>
   This section provides an overview of policy settings for pod
   security. By default, pod security policies are already enabled on
   &productname;.
  </para>
  <para>
   &productname; comes with 2 pre-defined policies. These policies are
   detailed in the examples below, including the required role
   definitions. All authenticated users and service accounts are given
   the role <literal>suse:caasp:psp:unprivileged</literal>. Other role
   bindings have to be created manually. For details about roles and
   role bindings, refer to <xref linkend= "sec.admin.security.role" />.
  </para>
  <variablelist>
   <varlistentry>
    <term><xref linkend="ex.admin.security.pod_policies.unprivileged"/></term>
    <listitem>
     <para>
      This is the default policy. It is a compromise between security
      and daily needs. This policy is bound to the role
      <literal>suse:caasp:psp:unprivileged</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><xref linkend="ex.admin.security.pod_policies.privileged"/></term>
    <listitem>
     <para>
      This policy has few restrictions and should only be given to
      highly trusted users. This policy is bound to the role
      <literal>suse:caasp:psp:privileged</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><xref linkend="ex.admin.security.pod_policies.daemonset" /></term>
    <listitem>
     <para>
      This example details how to define a privileged DaemonSet with a
      new default service account.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   To create new policies, you can adapt the provided example policies
   to your needs. Then copy them into a YAML file and apply the
   definition by executing <command>kubectl apply -f
   <replaceable>YAML_FILE</replaceable></command>.
  </para>
  <para>
   Detailed information is available at <link xlink:href=
  "https://v1-9.docs.kubernetes.io/docs/concepts/policy/pod-security-policy/"
  />.
  </para>
  <example xml:id="ex.admin.security.pod_policies.unprivileged">
   <title>Unprivileged Pod Security Policy</title>
   <para>
    The unprivileged Pod Security Policy is intended to be a
    reasonable compromise between the reality of &kube; workloads and
    the role <literal>suse:caasp:psp:privileged</literal>. By
    default, &productname; grants this policy to all users
    and service accounts.
   </para>
<screen>---
apiVersion: extensions/v1beta1
kind: PodSecurityPolicy
metadata:
  name: suse.caasp.psp.unprivileged<co xml:id="co.admin.security.pod_policies.unprivileged.name"/>
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: docker/default
    seccomp.security.alpha.kubernetes.io/defaultProfileName: docker/default
    apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default
    apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/default
spec:
  # Privileged
  privileged: false
  # Volumes and File Systems
  volumes:
    # Kubernetes Pseudo Volume Types
    - configMap
    - secret
    - emptyDir
    - downwardAPI
    - projected
    - persistentVolumeClaim
    # Networked Storage
    - nfs
    - rbd
    - cephFS
    - glusterfs
    - fc
    - iscsi
    # Cloud Volumes
    - cinder
    - gcePersistentDisk
    - awsElasticBlockStore
    - azureDisk
    - azureFile
    - vsphereVolume
  allowedHostPaths:
    # Note: We don't allow hostPath volumes above, but set this to a path we
    # control anyway as a belt+braces protection. /dev/null may be a better
    # option, but the implications of pointing this towards a device are
    # unclear.
    - pathPrefix: /opt/kubernetes-hostpath-volumes
  readOnlyRootFilesystem: false
  # Users and groups
  runAsUser:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  fsGroup:
    rule: RunAsAny
  # Privilege Escalation
  allowPrivilegeEscalation: false
  defaultAllowPrivilegeEscalation: false
  # Capabilities
  allowedCapabilities: []
  defaultAddCapabilities: []
  requiredDropCapabilities: []
  # Host namespaces
  hostPID: false
  hostIPC: false
  hostNetwork: false
  hostPorts:
  - min: 0
    max: 65535
  # SELinux
  seLinux:
    # SELinux is unsed in CaaSP
    rule: 'RunAsAny'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: suse:caasp:psp:unprivileged<xref linkend="co.admin.security.pod_policies.unprivileged.name"/>
rules:
  - apiGroups: ['extensions']
    resources: ['podsecuritypolicies']
    verbs: ['use']
resourceNames: ['suse.caasp.psp.unprivileged']<xref linkend="co.admin.security.pod_policies.unprivileged.name"/></screen>
   <calloutlist>
    <callout arearefs="co.admin.security.pod_policies.unprivileged.name">
     <para>
      Make sure to change the policy and role name when adapting the
      example for your own policies.
     </para>
    </callout>
   </calloutlist>
  </example>
  <example xml:id="ex.admin.security.pod_policies.privileged">
   <title>Privileged Pod Security Policy</title>
   <para>
    The privileged Pod Security Policy is intended to be given only to
    trusted workloads. It provides for as few restrictions as possible
    and should only be assigned to highly trusted users.
   </para>
<screen>---
apiVersion: extensions/v1beta1
kind: PodSecurityPolicy
metadata:
  name: suse.caasp.psp.privileged<co xml:id="co.admin.security.pod_policies.privileged.name"/>
  annotations:
    seccomp.security.alpha.kubernetes.io/defaultProfileName: docker/default
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
    apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/default
spec:
  # Privileged
  privileged: true
  # Volumes and File Systems
  volumes:
    # Kubernetes Pseudo Volume Types
    - configMap
    - secret
    - emptyDir
    - downwardAPI
    - projected
    - persistentVolumeClaim
    # Kubernetes Host Volume Types
    - hostPath
    # Networked Storage
    - nfs
    - rbd
    - cephFS
    - glusterfs
    - fc
    - iscsi
    # Cloud Volumes
    - cinder
    - gcePersistentDisk
    - awsElasticBlockStore
    - azureDisk
    - azureFile
    - vsphereVolume
  #allowedHostPaths: []
  readOnlyRootFilesystem: false
  # Users and groups
  runAsUser:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  fsGroup:
    rule: RunAsAny
  # Privilege Escalation
  allowPrivilegeEscalation: true
  defaultAllowPrivilegeEscalation: true
  # Capabilities
  allowedCapabilities:
    - '*'
  defaultAddCapabilities: []
  requiredDropCapabilities: []
  # Host namespaces
  hostPID: true
  hostIPC: true
  hostNetwork: true
  hostPorts:
  - min: 0
    max: 65535
  seLinux:
    # SELinux is unsed in CaaSP
    rule: 'RunAsAny'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: suse:caasp:psp:privileged<xref linkend="co.admin.security.pod_policies.privileged.name"/>
rules:
  - apiGroups: ['extensions']
    resources: ['podsecuritypolicies']
    verbs: ['use']
resourceNames: ['suse.caasp.psp.privileged']<xref linkend="co.admin.security.pod_policies.privileged.name"/></screen>
   <calloutlist>
    <callout arearefs="co.admin.security.pod_policies.privileged.name">
     <para>
      Make sure to change the policy and role name when adapting the
      example for your own policies.
     </para>
    </callout>
   </calloutlist>
  </example>
  <example xml:id="ex.admin.security.pod_policies.daemonset">
   <title>Privileged DaemonSet</title>
   <para>
    This example details how to create a privileged DaemonSet which uses
    the role <literal>suse:caasp:psp:privileged</literal>.
   </para>
<screen>---
apiVersion: v1
kind: Namespace
metadata:
  name: <replaceable>NAMESPACE</replaceable>
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: <replaceable>SERVICE_ACCOUNT_NAME</replaceable>
  namespace: <replaceable>NAMESPACE</replaceable>
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: <replaceable>ROLE_BINDING_NAME</replaceable>
  namespace: <replaceable>NAMESPACE</replaceable>
roleRef:
  kind: ClusterRole
  name: suse:caasp:psp:privileged
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: <replaceable>SERVICE_ACCOUNT_NAME</replaceable>
  namespace: <replaceable>NAMESPACE</replaceable>
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: <replaceable>DAEMONSET_NAME</replaceable>
  namespace: <replaceable>NAMESPACE</replaceable>
spec:
  selector:
    matchLabels:
      name: <replaceable>DAEMONSET_NAME</replaceable>
  template:
    metadata:
      labels:
        name: <replaceable>DAEMONSET_NAME</replaceable>
    spec:
      serviceAccountName: <replaceable>SERVICE_ACCOUNT_NAME</replaceable>
      hostPID: true
      hostIPC: true
      hostNetwork: true
      nodeSelector:
        beta.kubernetes.io/arch: amd64
      containers:
      - name: <replaceable>CONTAINER_NAME</replaceable>
        image: <replaceable>IMAGE_NAME</replaceable>
        volumeMounts:
        - name: examplemount
          mountPath: /something
        securityContext:
          privileged: true
      volumes:
      - name: examplemount
        hostPath:
          path: /var/log</screen>
  </example>
 </sect1>

 <sect1 xml:id="sec.admin.security.audit">
  <title>Security Audit Log</title>

  <para>
   To enable the &kube; security audit log please see:
   <xref linkend="sec.admin.logging.kubernetes"/>
  </para>
 </sect1>

 <sect1 xml:id="sec.admin.security.external.ldap">
  <title>Configuring External LDAP Server</title>
  <para>
   You can configure the cluster to authenticate &dashboard; and &kube; users
   against a pre-existing Lightweight Directory Access Protocol (LDAP) server
   and use <link xlink:href="https://ldap.com/ldap-filters/">LDAP Filters</link>
   to select the scope of users that will be permitted access.
  </para>
  <important>
   <title>Automatic Attributes from LDAP</title>
   <para>
    Please note that users that belong to the <literal>administrators</literal>
    group in LDAP will automatically be assigned the role of
    <literal>cluster-admin</literal>.
    </para>
   </important>
  <procedure>
   <title>Configuring External LDAP connector</title>
   <step>
    <para>
     Log in to &dashboard;
    </para>
   </step>
   <step>
    <para>
     Access the LDAP configuration settings under <guimenu>Settings
     &rarr; EXTERNAL AUTHENTICATION &rarr; LDAP Connectors</guimenu>.
    </para>
   </step>
   <step>
    <para>
     Click on <guimenu>Add LDAP connector</guimenu> to add a new connector.
    </para>
   </step>
   <step>
    <para>
     Configure the connector.
    </para>
   </step>
   <step>
    <para>
     Test the connector.
    </para>
   </step>
   <step>
    <para>
     Save your connector settings.
    </para>
   </step>
  </procedure>

  <sect2 xml:id="sec.admin.security.external.ldap.configuration">
   <title>LDAP Connector Settings</title>
   <note>
    <title>LDAP Anonymous Binding</title>
    <para>
     Anonymous binding is available, if allowed by the LDAP server.
    </para>
   </note>
   <informalfigure>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="velum_settings_ldap.png" width="100%"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="velum_settings_ldap.png" width="100%"/>
     </imageobject>
    </mediaobject>
   </informalfigure>
   <variablelist>
    <varlistentry>
     <term>Name</term>
     <listitem>
      <para>
       Name shown to user when selecting a connector
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <sect3>
    <title>Server</title>
    <para>
     Basic settings for the LDAP server host
    </para>
    <variablelist>
     <varlistentry>
      <term>Host</term>
      <listitem>
       <para>
        Host name of LDAP server reachable from the cluster
       </para>
       <note>
        <title>Provide the hostname as FQDN</title>
        <para>
         The <guimenu>Host</guimenu> field must use a Fully Qualified Domain
         Name, as IP address is not allowed with TLS.
        </para>
       </note>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Port</term>
      <listitem>
       <para>
        The port on which to connect to the host (e.g. <literal>StartTLS: 389, TLS: 646</literal>)
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>StartTLS</term>
      <listitem>
       <para>
        When enabled use StartTLS otherwise TLS will be used
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Certificate</term>
      <listitem>
       <para>
        The <guimenu>Certificate</guimenu> field must be a Base64-encoded PEM
        key.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>

   <sect3>
    <title>Authentication</title>
    <variablelist>
     <varlistentry>
      <term>Anonymous</term>
      <listitem>
       <para>
        Use anonymous authentication to do initial user search.
       </para>
       <para>
        Selects if you wish to perform an anonymous bind with the LDAP server.
        If set to <guimenu>False</guimenu> you must provide a
        <guimenu>DN</guimenu> and a <guimenu>Password</guimenu>. The latter two
        are hidden when the slider is set to <guimenu>True</guimenu>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>DN</term>
      <listitem>
       <para>
        Bind DN of user that can do user searches
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Password</term>
      <listitem>
       <para>
        Password of the user
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>

   <sect3>
    <title>User Search</title>
    <para>
     Definition of the user search parameters
    </para>
    <variablelist>
     <varlistentry>
      <term>Username Prompt</term>
      <listitem>
       <para>
        Label of LDAP attribute users will enter to identify themselves (e.g.
        <literal>username</literal>)
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Base DN</term>
      <listitem>
       <para>
        BaseDN where users are located (e.g. <literal>cn=users,dc=example,dc=com</literal>)
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Filter</term>
      <listitem>
       <para>
        Filter to specify type of user objects (e.g. <literal>"(objectClass=person)"</literal>)
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
   <sect3>
    <title>User Attribute Map</title>
    <para>
     Definition of the user attribute map
    </para>
    <variablelist>
     <varlistentry>
      <term>Username</term>
      <listitem>
       <para>
         Attribute users will enter to identify themselves
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>ID</term>
      <listitem>
       <para>
        Attribute used to identify user within the system (e.g. <literal>uid</literal>)
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Email</term>
      <listitem>
       <para>
        Attribute containing email of users
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Name</term>
      <listitem>
       <para>
        Attribute used as username used within OIDC tokens
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>

   <sect3>
    <title>Group Search</title>
    <para>
     Definition of group search parameters
    </para>
    <variablelist>
     <varlistentry>
      <term>Base DN</term>
      <listitem>
       <para>
        BaseDN where groups are located (e.g. <literal>cn=users,dc=example,dc=com</literal>)
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Filter</term>
      <listitem>
       <para>
        Filter to specify type of user objects (e.g. <literal>"(objectClass=group)"</literal>)
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>

   <sect3>
    <title>Group Attribute Map</title>
    <para>
     Definition of group attribute map
    </para>
    <variablelist>
     <varlistentry>
      <term>User</term>
      <listitem>
       <para>
        Attribute to map as user (e.g. <literal>uid</literal>)
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Group</term>
      <listitem>
       <para>
        Attribute identifying membership (e.g. <literal>member</literal>)
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Name</term>
      <listitem>
       <para>
        Attribute to map as name (e.g. <literal>name</literal>)
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>

  </sect2>

  <sect2 xml:id="sec.admin.security.external.ldap.examples">
   <title>Examples</title>
   <para>
    In both directories, <literal>user-regular1</literal> and
    <literal>user-regular2</literal> are members of the
    <literal>k8s-users</literal> group, <literal>user-admin</literal> is a
    member of the <literal>k8s-admins</literal> group.
   </para>

   <para>
    For Active Directory, <literal>user-bind</literal> is a simple user which is
    member of the default <literal>Domain Users</literal> group. Hence, we can
    use it to authenticate because has read-only access to Active Directory.
   </para>

   <para>
    The mail attribute is used to create the RBAC rules.
   </para>

   <sect3 xml:id="sec.admin.security.external.ldap.examples.ad">
    <title>Active Directory</title>
    <example>
     <title>Active Directory Content LDIF</title>
<screen># user-regular1, Users, example.com
dn: CN=user-regular1,CN=Users,DC=example,DC=com
objectClass: top
objectClass: person
objectClass: organizationalPerson
objectClass: user
cn: user-regular1
sn: Regular1
givenName: User
distinguishedName: CN=user-regular1,CN=Users,DC=example,DC=com
displayName: User Regular1
memberOf: CN=Domain Users,CN=Users,DC=example,DC=com
memberOf: CN=k8s-users,CN=Groups,DC=example,DC=com
name: user-regular1
sAMAccountName: user-regular1
objectCategory: CN=Person,CN=Schema,CN=Configuration,DC=example,DC=com
mail: user-regular1@example.com

# user-regular2, Users, example.com
dn: CN=user-regular2,CN=Users,DC=example,DC=com
objectClass: top
objectClass: person
objectClass: organizationalPerson
objectClass: user
cn: user-regular2
sn: Regular2
givenName: User
distinguishedName: CN=user-regular2,CN=Users,DC=example,DC=com
displayName: User Regular2
memberOf: CN=Domain Users,CN=Users,DC=example,DC=com
memberOf: CN=k8s-users,CN=Groups,DC=example,DC=com
name: user-regular2
sAMAccountName: user-regular2
objectCategory: CN=Person,CN=Schema,CN=Configuration,DC=example,DC=com
mail: user-regular2@example.com

# user-bind, Users, example.com
dn: CN=user-bind,CN=Users,DC=example,DC=com
objectClass: top
objectClass: person
objectClass: organizationalPerson
objectClass: user
cn: user-bind
sn: Bind
givenName: User
distinguishedName: CN=user-bind,CN=Users,DC=example,DC=com
displayName: User Bind
memberOf: CN=Domain Users,CN=Users,DC=example,DC=com
name: user-bind
sAMAccountName: user-bind
objectCategory: CN=Person,CN=Schema,CN=Configuration,DC=example,DC=com
mail: user-bind@example.com

# user-admin, Users, example.com
dn: CN=user-admin,CN=Users,DC=example,DC=com
objectClass: top
objectClass: person
objectClass: organizationalPerson
objectClass: user
cn: user-admin
sn:: Admin
givenName: User
distinguishedName: CN=user-admin,CN=Users,DC=example,DC=com
displayName: User Admin
memberOf: CN=Domain Users,CN=Users,DC=example,DC=com
memberOf: CN=k8s-admins,CN=Groups,DC=example,DC=com
name: user-admin
sAMAccountName: user-admin
objectCategory: CN=Person,CN=Schema,CN=Configuration,DC=example,DC=com
mail: user-admin@example.com

# k8s-users, Groups, example.com
dn: CN=k8s-users,CN=Groups,DC=example,DC=com
objectClass: top
objectClass: group
cn: k8s-users
member: CN=user-regular1,CN=Users,DC=example,DC=com
member: CN=user-regular2,CN=Users,DC=example,DC=com
distinguishedName: CN=k8s-users,CN=Groups,DC=example,DC=com
name: k8s-users
sAMAccountName: k8s-users
objectCategory: CN=Group,CN=Schema,CN=Configuration,DC=example,DC=com

# k8s-admins, Groups, example.com
dn: CN=k8s-admins,CN=Groups,DC=example,DC=com
objectClass: top
objectClass: group
cn: k8s-admins
member: CN=user-admin,CN=Users,DC=example,DC=com
distinguishedName: CN=k8s-admins,CN=Groups,DC=example,DC=com
name: k8s-admins
sAMAccountName: k8s-admins
objectCategory: CN=Group,CN=Schema,CN=Configuration,DC=example,DC=com
     </screen>
    </example>
    <example>
     <title>Active Directory LDAP Connector (YAML)</title>
<screen># Server
Host: domain-controler.example.com
Port: 636
StartTLS: Off

Certificate: DC_Trust_Root.crt

# Authentication
Anonymous: False
DN: user-bind@example.com
Password: &lt;password&gt;

# User search
Identifying User Attribute: sAMAccountName
Base DN: CN=Users,DC=example,DC=com
Filter: (objectClass=person)

# User Attribute Map
Username: sAMAccountName
ID: distinguishedName
Email: mail
Name: sAMAccountName

# Group Search
Base DN: CN=Groups,DC=example,DC=com
Filter: (objectClass=group)

# Group Attribute Map
User: distinguishedName
Group: member
Name: sAMAccountName
     </screen>
    </example>
   </sect3>

   <sect3 xml:id="sec.admin.security.external.ldap.examples.openldap">
    <title>openLDAP</title>
    <example>
     <title>openLDAP Content LDIF</title>
<screen># user-regular1, accounts, example.com
dn: CN=user-regular1,OU=accounts,DC=example,DC=com
cn: User Regular1
uidNumber: 1200
gidNumber: 500
objectClass: inetOrgPerson
objectClass: organizationalPerson
objectClass: person
uid: user-regular1
mail: user-regular1@example.com
sn: Regular1
givenName: User

# user-regular2, accounts, example.com
dn: CN=user-regular2,OU=accounts,DC=example,DC=com
cn: User Regular2
uidNumber: 1300
gidNumber: 500
objectClass: inetOrgPerson
objectClass: organizationalPerson
objectClass: person
uid: user-regular2
mail: user-regular2@example.com
sn: Regular2
givenName: User

# user-admin, accounts, example.com
dn: CN=user-admin,OU=accounts,DC=example,DC=com
cn: User Admin
uidNumber: 1000
gidNumber: 100
objectClass: inetOrgPerson
objectClass: organizationalPerson
objectClass: person
uid: user-admin
mail: user-admin@example.com
sn: Admin
givenName: User

# k8s-users, accounts, example.com
dn: CN=k8s-users,OU=accounts,DC=example,DC=com
gidNumber: 500
objectClass: posixGroup
cn: k8s-users
memberUid: user-regular1
memberUid: user-regular2

# k8s-admins, accounts, example.com
dn: CN=k8s-admins,OU=accounts,DC=example,DC=com
gidNumber: 100
objectClass: posixGroup
cn: k8s-admins
memberUid: user-admin
     </screen>
    </example>

    <example>
     <title>External LDAP Connector without Authentication</title>
<screen># Server
Host: ldap.example.com
Port: 636
StartTLS: Off

Certificate: LDAP_Trust_Root.crt

# Authentication
Anonymous: True

# User search
Identifying User Attribute: uid
Base DN: OU=accounts,DC=example,DC=com
Filter: (objectClass=person)

# User Attribute Map
Username: uid
ID: uid
Email: mail
Name: uid

# Group Search
Base DN: OU=accounts,DC=example,DC=com
Filter: (objectClass=posixGroup)

# Group Attribute Map
User: uid
Group: memberUid
Name: cn
     </screen>
    </example>
   </sect3>
  </sect2>
 </sect1>
</chapter>
