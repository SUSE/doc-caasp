<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.1" xml:id="cha.admin.security"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <title>Security</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
  <abstract>
   <para>
    This section introduces the security features of &productname;.
    This includes authentication, management of users and groups, and
    the configuration of audit log files.
   </para>
  </abstract>
 </info>
 <sect1 xml:id="sec.admin.security.auth.kubeconfig">
  <title>Access Control Overview</title>
  <para>
   &productname; provides role-based access control (RBAC) to perform
   authentication and authorization of activities performed against a
   &kube; cluster. &kube; uses several steps for access control.
   The steps in processing order are:
  </para>
  <variablelist>
   <varlistentry>
    <term>Authentication</term>
    <listitem>
     <para>
      The authentication confirms the identity of an user. The
      <emphasis>OpenID Connect</emphasis> (<emphasis>OIDC</emphasis>)
      implementation <literal>dex</literal> is used as an
      authentication provider by &kube;. <literal>dex</literal>
      connects to an LDAP server to look up user information. To
      authenticate against the cluster, the
      <filename>kubeconfig</filename> file is used. For details, refer
      to <xref linkend="sec.admin.kubernetes.install-kubectl" />.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Authorization</term>
    <listitem>
     <para>
      &productname; uses <emphasis>role-based access control</emphasis>
      (<emphasis>RBAC</emphasis>). Roles and users are managed with
      LDAP. For details, refer to <xref linkend=
      "sec.admin.security.users" />.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Admission</term>
    <listitem>
     <para>
      Admission controllers in &kube; can mutate and validate requests.
      For details, refer to <link xlink:href=
      "https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/"
      />.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   For details about access control in &kube;, refer to <link
   xlink:href=
   "https://kubernetes.io/docs/reference/access-authn-authz/controlling-access/"
   />.
  </para>
 </sect1>

 <sect1 xml:id="sec.admin.security.installing_rootca">
  <title>Obtaining and Installing Root CA Certificate</title>

  <procedure>
   <step>
    <para>
     Obtain the root CA certificate from any node in your cluster with
     <command>scp</command>.
    </para>
    <screen>&prompt.user;<command>scp NODE:/etc/pki/trust/anchors/<replaceable>SUSE_CaaSP_CA</replaceable>.crt .</command></screen>
   </step>
   <step>
    <para>
     Copy the Root CA certificate file into the trust anchors directory
     <filename>/etc/pki/trust/anchors/</filename>.
    </para>
    <screen>&prompt.sudo;cp <replaceable>SUSE_CaaSP_CA</replaceable>.crt <filename>/etc/pki/trust/anchors/</filename></screen>
   </step>
   <step>
    <para>
     Update the cache for known CA certificates.
    </para>
    <screen>&prompt.sudo;<command>update-ca-certificates</command></screen>
   </step>
  </procedure>
  <note>
   <title>Operating System Specific Instructions</title>
   <para>
    The location of the trust store anchors directory or the command to refresh
    the CA certificates cache might vary depending on your operating system.
   </para>
   <para>
    Please consult the official documentation for your operating system to
    find the respective alternatives.
   </para>
  </note>
 </sect1>

 <sect1 xml:id="sec.admin.security.users">
  <title>Managing Users and Groups</title>

  <para>
   User information is stored in <phrase role="productname">OpenLDAP</phrase>
   running in a container on your &productname; &admin_node;. You can use
   standard LDAP administration tools for managing these users remotely. To do
   so, install the <package>openldap2</package> package on a computer in your
   network and make sure that computer can connect to the &admin_node; on port
   389. For further information, refer to
   <xref linkend="sec.deploy.requirements.network"/>.
  </para>

  <sect2 xml:id="sec.admin.security.users.ldap-rootpw">
   <title>Obtaining the OpenLDAP Password</title>
   <para>
    Before performing any administrative tasks on the
    <phrase
      role="productname">OpenLDAP</phrase> instance, you will need
    to retrieve your <phrase role="productname">OpenLDAP</phrase> administrator
    account password. To do this, run:
   </para>
<screen>&prompt.user;<command>ssh root@<replaceable>caasp-admin.example.com</replaceable> \
cat /var/lib/misc/infra-secrets/openldap-password</command></screen>
   <para>
    Make sure to replace <replaceable>caasp-admin.example.com</replaceable>
    with the FQDN or IP of your &admin_node;.
   </para>
  </sect2>

  <sect2 xml:id="sec.admin.security.users.import-cert">
   <title>Importing the LDAP Certificate</title>
   <para>
    To be able to perform any LDAP queries, you first need to import the
    generated LDAP certificate to your local trusted certificate storage. On
    the &admin_node;, run:
   </para>
<screen>&prompt.root;<command>docker exec -it $(docker ps | grep openldap | \
awk '{print $1}') cat /etc/openldap/pki/ca.crt > ~/ca.pem</command>
&prompt.root;<command>scp ~/ca.pem root@<replaceable>WORKSTATION</replaceable>:/usr/share/pki/trust/anchors/ca-caasp.crt.pem</command></screen>
   <para>
    Replace <replaceable>WORKSTATION</replaceable> with the appropriate
    hostname for the workstation where you wish to run the LDAP queries.
   </para>
   <para>
    Then, on that workstation, run:
   </para>
<screen>&prompt.root;<command>update-ca-certificates</command></screen>
  </sect2>

  <sect2 xml:id="sec.admin.security.users.add">
   <title>Adding New Users</title>
   <para>
    By default, when you create the first user in &dashboard; during bootstrap
    of your cluster, that user is granted <literal>Cluster
    Administrator</literal> privileges within &kube;. You can add additional
    users with these rights by adding new entries into the LDAP directory.
   </para>
   <para>
    To add a new user, create a LDIF file like this:
   </para>
   <example xml:id="ex.admin.security.users.add">
    <title>LDIF File For a New User</title>
<screen>dn: uid=<replaceable>USERID</replaceable><co xml:id="co.admin.security.users.add.uid"/>,ou=People,dc=infra,dc=caasp,dc=local
objectClass: person
objectClass: inetOrgPerson
objectClass: top
uid: <replaceable>USERID</replaceable> <xref linkend="co.admin.security.users.add.uid" xrefstyle="select:label nopage"/>
userPassword: <replaceable>PASSWORD_HASH</replaceable> <co xml:id="co.admin.security.users.add.password"/>
givenname: <replaceable>FIRST_NAME</replaceable> <co xml:id="co.admin.security.users.add.firstname"/>
sn: <replaceable>SURNAME</replaceable> <co xml:id="co.admin.security.users.add.surname"/>
cn: <replaceable>FULL_NAME</replaceable> <co xml:id="co.admin.security.users.add.fullname"/>
mail: <replaceable>E-MAIL_ADDRESS</replaceable> <co xml:id="co.admin.security.users.add.email"/></screen>
    <para>
     Make sure to replace all the parameters indicated <replaceable>LIKE
     THIS</replaceable> in the template above as follows:
    </para>
    <calloutlist>
     <callout arearefs="co.admin.security.users.add.uid">
      <para>
       User ID (UID) of the new user. Needs to be unique.
      </para>
     </callout>
     <callout arearefs="co.admin.security.users.add.password">
      <para>
       The user's hashed password. Use <command>/usr/sbin/slappasswd</command>
       to generate the hash.
      </para>
     </callout>
     <callout arearefs="co.admin.security.users.add.firstname">
      <para>
       The user's first name
      </para>
     </callout>
     <callout arearefs="co.admin.security.users.add.surname">
      <para>
       The user's last name
      </para>
     </callout>
     <callout arearefs="co.admin.security.users.add.fullname">
      <para>
       The user's full name
      </para>
     </callout>
     <callout arearefs="co.admin.security.users.add.email">
      <para>
       The user's e-mail address. It is used as the login name to &dashboard;
       and &kube;.
      </para>
     </callout>
    </calloutlist>
   </example>
   <para>
    Populate your OpenLDAP server with this LDIF file:
   </para>
<screen>&prompt.root;<command>ldapadd -H ldap://<replaceable>ADMINISTRATION_NODE_FQDN</replaceable>:389 -ZZ \
-D cn=admin,dc=infra,dc=caasp,dc=local -w <replaceable>LDAP_ADMIN_PASSWORD</replaceable> -f <replaceable>LDIF_FILE</replaceable></command></screen>
   <para>
    To add this new user to the existing Administrators group, create a new
    LDIF file like this:
   </para>
   <example xml:id="ex.admin.auth.users.add.admin">
    <title>LDIF File to Add a User to the 'Administrators' Group</title>
<screen>dn: cn=Administrators,ou=Groups,dc=infra,dc=caasp,dc=local
changetype: modify
add: uniqueMember
uniqueMember: uid=<replaceable>USERID</replaceable><co xml:id="co.admin.security.users.add.admin"/>,ou=People,dc=infra,dc=caasp,dc=local</screen>
    <para>
     Make sure to replace all the parameters indicated <replaceable>LIKE
     THIS</replaceable> in the template above as follows:
    </para>
    <calloutlist>
     <callout arearefs="co.admin.security.users.add.admin">
      <para>
       The user ID (UID) of the user
      </para>
     </callout>
    </calloutlist>
   </example>
   <para>
    Populate your <phrase role="productname">OpenLDAP</phrase> server with the
    LDIF file:
   </para>
<screen>&prompt.root;<command>ldapadd -H ldap://<replaceable>ADMINISTRATION_NODE_FQDN</replaceable>:389 -ZZ \
-D cn=admin,dc=infra,dc=caasp,dc=local -w <replaceable>LDAP_ADMIN_PASSWORD</replaceable> -f <replaceable>LDIF_FILE</replaceable></command></screen>
  </sect2>

  <sect2 xml:id="sec.admin.security.users.change-pw">
   <title>Changing a User's Password</title>
   <para>
    To change a user's password, create a LDIF file like this:
   </para>
   <example xml:id="ex.admin.security.users.change-pw">
    <title>LDIF File to Change a User's Password</title>
<screen>dn: uid=<replaceable>userid</replaceable><co xml:id="co.admin.security.users.change-pw.uid"/>,ou=People,dc=infra,dc=caasp,dc=local
changetype: modify
replace: userPassword
userPassword: <replaceable>password hash</replaceable><co xml:id="co.admin.security.users.change-pw.password"/></screen>
    <para>
     Make sure to replace all the parameters indicated <replaceable>LIKE
     THIS</replaceable> in the template above as follows:
    </para>
    <calloutlist>
     <callout arearefs="co.admin.security.users.change-pw.uid">
      <para>
       User ID (UID) of the user.
      </para>
     </callout>
     <callout arearefs="co.admin.security.users.change-pw.password">
      <para>
       The user's new hashed password. Use
       <command>/usr/sbin/slappasswd</command> to generate the hash.
      </para>
     </callout>
    </calloutlist>
   </example>
   <para>
    Populate your OpenLDAP server with this LDIF file:
   </para>
<screen>&prompt.root;<command>ldapadd -H ldap://<replaceable>ADMINISTRATION_NODE_FQDN</replaceable>:389 -ZZ \
-D cn=admin,dc=infra,dc=caasp,dc=local -w <replaceable>LDAP_ADMIN_PASSWORD</replaceable> -f <replaceable>LDIF_FILE</replaceable></command></screen>
  </sect2>

  <sect2 xml:id="sec.admin.security.groups">
   <title>Adding New Groups</title>
   <para>
    Say you have users that you want to grant access to manage a single
    namespace in Kubernetes. To do this, first create your users as mentioned
    in <xref linkend="sec.admin.security.users.add"/>. Then create a new group:
   </para>
   <example xml:id="ex.admin.security.groups">
    <title>LDIF File to Add a New Group</title>
<screen>
dn: cn=<replaceable>group name</replaceable><co xml:id="co.admin.security.groups.cn"/>,ou=Groups,dc=infra,dc=caasp,dc=local
objectclass: top
objectclass: groupOfUniqueNames
cn: <replaceable>group name</replaceable><xref linkend="co.admin.security.groups.cn" xrefstyle="select:label nopage"/>
uniqueMember: uid=<replaceable>member1</replaceable>,<co xml:id="co.admin.security.groups.member"/>ou=People,dc=infra,dc=caasp,dc=local
uniqueMember: uid=<replaceable>member2</replaceable>,<xref linkend="co.admin.security.groups.member" xrefstyle="select:label nopage"/>ou=People,dc=infra,dc=caasp,dc=local
uniqueMember: uid=<replaceable>member3</replaceable>,<xref linkend="co.admin.security.groups.member" xrefstyle="select:label nopage"/>ou=People,dc=infra,dc=caasp,dc=local
     </screen>
    <para>
     Make sure to replace all the parameters indicated <replaceable>LIKE
     THIS</replaceable> in the template above as follows:
    </para>
    <calloutlist>
     <callout arearefs="co.admin.security.groups.cn">
      <para>
       The group's name.
      </para>
     </callout>
     <callout arearefs="co.admin.security.groups.member">
      <para>
       Members of the group. Repeat the <literal>uniqueMember</literal>
       attribute for every member of this group.
      </para>
     </callout>
    </calloutlist>
   </example>
   <para>
    Populate your <phrase role="productname">OpenLDAP</phrase> server with the
    LDIF file:
   </para>
<screen>&prompt.root;<command>ldapadd -H ldap://<replaceable>ADMINISTRATION_NODE_FQDN</replaceable>:389 -ZZ \
-D cn=admin,dc=infra,dc=caasp,dc=local -w <replaceable>LDAP_ADMIN_PASSWORD</replaceable> -f <replaceable>LDIF_FILE</replaceable></command></screen>
   <para>
    Next, create a role binding to allow this new LDAP group access in &kube;.
    Create a Kubernetes deployment descriptor like this:
   </para>
   <example xml:id="ex.admin.security.groups.role">
    <title>Kubernetes Role Binding Deployment Descriptor</title>
<screen># Define a Role and its permissions in &kube;
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: <replaceable>ROLE_NAME</replaceable><co xml:id="co.admin.security.groups.role-name"/>
  namespace: <replaceable>APPLICABLE_NAMESPACE</replaceable><co xml:id="co.admin.security.groups.role-namespace"/>
# This set of rules amounts to "allow all"
rules:
- apiGroups: [""]<co xml:id="co.admin.security.groups.apigroup"/>
  resources: ["<replaceable>CONFIGMAP</replaceable>"]<co xml:id="co.admin.security.groups.object"/>
  resourceNames: ["<replaceable>MY-POD</replaceable>"]<co xml:id="co.admin.security.groups.resnames"/>
  verbs: ["<replaceable>LIST</replaceable>"]<co xml:id="co.admin.security.groups.function"/>
---
# Map an LDAP group to this &kube; role
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: <replaceable>ROLE_BINDING_NAME</replaceable><co xml:id="co.admin.security.groups.role-binding-name"/>
  namespace: <replaceable>APPLICABLE_NAMESPACE</replaceable><xref linkend="co.admin.security.groups.role-namespace" xrefstyle="select:label nopage"/>
subjects:
- kind: Group
  name: <replaceable>LDAP_GROUP_NAME</replaceable><co xml:id="co.admin.security.groups.ldap-group-name"/>
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: <replaceable>ROLE_NAME</replaceable><xref linkend="co.admin.security.groups.role-name" xrefstyle="select:label nopage"/>
  apiGroup: rbac.authorization.k8s.io</screen>
    <calloutlist>
     <callout arearefs="co.admin.security.groups.role-name">
      <para>
       Name of the new role in &kube;
      </para>
     </callout>
     <callout arearefs="co.admin.security.groups.role-namespace">
      <para>
       Namespace the new group should be allowed to access. Use
       <literal>default</literal> for &kube;' default namespace
      </para>
     </callout>
     <callout arearefs="co.admin.security.groups.apigroup">
      <para>
       &kube; API groups &mdash; use "" for the core group
       <literal>rbac.authorization.k8s.io</literal>
      </para>
     </callout>
     <callout arearefs="co.admin.security.groups.object">
      <para>
       &kube; objects/resources e.g. <literal>"configMap"</literal>,
       <literal>"Pod"</literal>, etc.
      </para>
     </callout>
     <callout arearefs="co.admin.security.groups.resnames">
      <para>
       specific named resources, e.g. <literal>"my-pod"</literal>,
       <literal>"my-config-map"</literal>
      </para>
     </callout>
     <callout arearefs="co.admin.security.groups.function">
      <para>
       Functions as seen in <literal>kubectl</literal> subcommands, e.g.
       "list", "get", "watch", "update"
      </para>
     </callout>
     <callout arearefs="co.admin.security.groups.role-binding-name">
      <para>
       Name of the role binding in &kube;
      </para>
     </callout>
     <callout arearefs="co.admin.security.groups.ldap-group-name">
      <para>
       Name of the corresponding group in LDAP
      </para>
     </callout>
    </calloutlist>
   </example>
   <para>
    Add this role and binding to &kube;:
   </para>
<screen>&prompt.user;<command>kubectl apply -f <replaceable>DEPLOYMENT_DESCRIPTOR_FILE</replaceable></command></screen>
  </sect2>

  <sect2>
   <title>Further information</title>
   <para>
    For more details on authorization in &kube;, refer to
    <link
     xlink:href="https://kubernetes.io/docs/admin/authorization/rbac/"></link>
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.admin.security.audit">
  <title>Security Audit Log</title>

  <para>
   To enable the &kube; security audit log please see:
   <xref linkend="sec.admin.logging.kubernetes"/>
  </para>
 </sect1>
</chapter>
