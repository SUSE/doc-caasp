<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.1" xml:id="cha.admin.security"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <title>Security</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
  <abstract>
   <para>
    This section introduces the security features of &productname;.
    This includes authentication, management of users and groups, and
    the configuration of audit log files.
   </para>
  </abstract>
 </info>
 <sect1 xml:id="sec.admin.security.auth.kubeconfig">
  <title>Access Control Overview</title>
  <para>
   &productname; provides role-based access control (RBAC) to perform
   authentication and authorization of activities performed against a
   &kube; cluster. &kube; uses several steps for access control.
   The steps in processing order are:
  </para>
  <variablelist>
   <varlistentry>
    <term>Authentication</term>
    <listitem>
     <para>
      The authentication confirms the identity of an user. The
      <emphasis>OpenID Connect</emphasis> (<emphasis>OIDC</emphasis>)
      implementation <literal>dex</literal> is used as an
      authentication provider by &kube;. <literal>dex</literal>
      connects to an LDAP server to look up user information. To
      authenticate against the cluster, the
      <filename>kubeconfig</filename> file is used. For details, refer
      to <xref linkend="sec.admin.kubernetes.install-kubectl" />.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Authorization</term>
    <listitem>
     <para>
      &productname; uses <emphasis>role-based access control</emphasis>
      (<emphasis>RBAC</emphasis>). For &kube;, RBAC defines which
      subjects can do which operations on API resources. Groups and
      users, called <emphasis>subjects</emphasis> in &kube;, are
      managed with LDAP. For details, refer to <xref linkend=
      "sec.admin.security.users" />. To define which operations, called
      <emphasis>verbs</emphasis> in &kube;, are allowed for subjects,
      refer to <xref linkend="sec.admin.security.role" />.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Admission</term>
    <listitem>
     <para>
      Admission controllers in &kube; can mutate and validate requests.
      For details, refer to <link xlink:href=
      "https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/"
      />.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   For details about access control in &kube;, refer to <link
   xlink:href=
   "https://kubernetes.io/docs/reference/access-authn-authz/controlling-access/"
   />.
  </para>
 </sect1>

 <sect1 xml:id="sec.admin.security.installing_rootca">
  <title>Obtaining and Installing Root CA Certificate</title>

  <procedure>
   <step>
    <para>
     Obtain the root CA certificate from any node in your cluster with
     <command>scp</command>.
    </para>
    <screen>&prompt.user;<command>scp NODE:/etc/pki/trust/anchors/<replaceable>SUSE_CaaSP_CA</replaceable>.crt .</command></screen>
   </step>
   <step>
    <para>
     Copy the Root CA certificate file into the trust anchors directory
     <filename>/etc/pki/trust/anchors/</filename>.
    </para>
    <screen>&prompt.sudo;cp <replaceable>SUSE_CaaSP_CA</replaceable>.crt <filename>/etc/pki/trust/anchors/</filename></screen>
   </step>
   <step>
    <para>
     Update the cache for known CA certificates.
    </para>
    <screen>&prompt.sudo;<command>update-ca-certificates</command></screen>
   </step>
  </procedure>
  <note>
   <title>Operating System Specific Instructions</title>
   <para>
    The location of the trust store anchors directory or the command to refresh
    the CA certificates cache might vary depending on your operating system.
   </para>
   <para>
    Please consult the official documentation for your operating system to
    find the respective alternatives.
   </para>
  </note>
 </sect1>

 <sect1 xml:id="sec.admin.security.users">
  <title>Managing Users and Groups</title>

  <para>
   User information is stored in <phrase role="productname">OpenLDAP</phrase>
   running in a container on your &productname; &admin_node;. You can use
   standard LDAP administration tools for managing these users remotely. To do
   so, install the <package>openldap2</package> package on a computer in your
   network and make sure that computer can connect to the &admin_node; on port
   389.
  </para>

  <sect2 xml:id="sec.admin.security.users.ldap_preparation">
   <title>Preparing LDAP Authentication</title>
   <para>
    To perform administrative tasks from a
    <replaceable>WORKSTATION</replaceable> on the <phrase role=
    "productname">LDAP</phrase> directory, retrieve the <phrase
    role="productname">OpenLDAP</phrase> administrator password and
    install the LDAP certificate.
   </para>
   <procedure>
    <step>
     <para>
      Retrieve the LDAP admin password. Note the password for later use.
     </para>
<screen>&prompt.root.admin;<command>cat /var/lib/misc/infra-secrets/openldap-password</command></screen>
    </step>
    <step>
     <para>
      Import the LDAP certificate to your local trusted certificate
      storage. On the &admin_node;, run:
     </para>
<screen>&prompt.root.admin;<command>docker exec -it $(docker ps | grep openldap | \
awk '{print $1}') cat /etc/openldap/pki/ca.crt > ~/ca.pem</command>
&prompt.root.admin;<command>scp ~/ca.pem root@<replaceable>WORKSTATION</replaceable>:/usr/share/pki/trust/anchors/ca-caasp.crt.pem</command></screen>
     <para>
      Replace <replaceable>WORKSTATION</replaceable> with the appropriate
      hostname for the workstation where you wish to run the LDAP queries.
     </para>
    </step>
    <step>
     <para>
      Then, on that workstation, run:
     </para>
<screen>&prompt.root;<command>update-ca-certificates</command></screen>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec.admin.security.users.add">
   <title>Adding New User</title>
   <para>
    By default, when you create the first user in &dashboard; during bootstrap
    of your cluster, that user is granted <literal>Cluster
    Administrator</literal> privileges within &kube;. You can add additional
    users with these rights by adding new entries into the LDAP directory.
   </para>
   <procedure>
    <step>
     <para>
      To add a new user, create a LDIF file like this:
     </para>
     <example xml:id="ex.admin.security.users.add">
      <title>LDIF File For a New User</title>
<screen>dn: uid=<replaceable>USERID</replaceable><co xml:id="co.admin.security.users.add.uid"/>,ou=People,dc=infra,dc=caasp,dc=local
objectClass: person
objectClass: inetOrgPerson
objectClass: top
uid: <replaceable>USERID</replaceable> <xref linkend="co.admin.security.users.add.uid" xrefstyle="select:label nopage"/>
userPassword: <replaceable>PASSWORD_HASH</replaceable> <co xml:id="co.admin.security.users.add.password"/>
givenname: <replaceable>FIRST_NAME</replaceable> <co xml:id="co.admin.security.users.add.firstname"/>
sn: <replaceable>SURNAME</replaceable> <co xml:id="co.admin.security.users.add.surname"/>
cn: <replaceable>FULL_NAME</replaceable> <co xml:id="co.admin.security.users.add.fullname"/>
mail: <replaceable>E-MAIL_ADDRESS</replaceable> <co xml:id="co.admin.security.users.add.email"/></screen>
      <calloutlist>
       <callout arearefs="co.admin.security.users.add.uid">
        <para>
         User ID (UID) of the new user. Needs to be unique.
        </para>
       </callout>
       <callout arearefs="co.admin.security.users.add.password">
        <para>
         The user's hashed password. Use <command>/usr/sbin/slappasswd</command>
         to generate the hash.
        </para>
       </callout>
       <callout arearefs="co.admin.security.users.add.firstname">
        <para>
         The user's first name
        </para>
       </callout>
       <callout arearefs="co.admin.security.users.add.surname">
        <para>
         The user's last name
        </para>
       </callout>
       <callout arearefs="co.admin.security.users.add.fullname">
        <para>
         The user's full name
        </para>
       </callout>
       <callout arearefs="co.admin.security.users.add.email">
        <para>
         The user's e-mail address. It is used as the login name to &dashboard;
         and &kube;.
        </para>
       </callout>
      </calloutlist>
     </example>
    </step>
    <step>
     <para>
      Populate your OpenLDAP server with this LDIF file:
     </para>
<screen>&prompt.user;<command>ldapadd -H ldap://<replaceable>ADMINISTRATION_NODE_FQDN</replaceable>:389 -ZZ \
-D cn=admin,dc=infra,dc=caasp,dc=local -w <replaceable>LDAP_ADMIN_PASSWORD</replaceable> -f <replaceable>LDIF_FILE</replaceable></command></screen>
    </step>
   </procedure>
  </sect2>

  <sect2>
   <title>Showing User Attributes</title>
   <para>
    To show the attributes of a user, use the <command>ldapsearch</command>
    command.
   </para>
<screen>&prompt.user;<command>ldapsearch -H ldap://<replaceable>ADMINISTRATION_NODE_FQDN</replaceable>:389 -ZZ \
    -D cn=admin,dc=infra,dc=caasp,dc=local -w <replaceable>LDAP_ADMIN_PASSWORD</replaceable> \
    -b uid=<replaceable>USERID</replaceable>,ou=People,dc=infra,dc=caasp,dc=local</command></screen>
  </sect2>

  <sect2 xml:id="sec.admin.security.users.change">
   <title>Changing User</title>
   <para>
    The following procedure details how to modify a user in the
    LDAP directory. The example LDIF files detail how to change a user
    password and add a user to the <literal>Administrators</literal>
    group. To modify other fields, use the the password example and
    replace <literal>userPassword</literal> with other field names.
   </para>
   <procedure>
    <step>
     <para>
      Create a LDIF file that contains the change to the LDAP directory.
     </para>
     <example xml:id="ex.admin.security.users.change_password">
      <title>Change User Password</title>
<screen>dn: uid=<replaceable>USERID</replaceable><co xml:id="co.admin.security.users.change-pw.uid"/>,ou=People,dc=infra,dc=caasp,dc=local
changetype: modify
replace: userPassword
userPassword: <replaceable>PASSWORD</replaceable><co xml:id="co.admin.security.users.change-pw.password"/></screen>
      <calloutlist>
       <callout arearefs="co.admin.security.users.change-pw.uid">
        <para>
         <replaceable>USERID</replaceable> with the user's ID.
        </para>
       </callout>
       <callout arearefs="co.admin.security.users.change-pw.password">
        <para>
         <replaceable>PASSWORD</replaceable> with the user's new hashed
         password. Use <command>/usr/sbin/slappasswd</command> to
         generate the hash.
        </para>
       </callout>
      </calloutlist>
     </example>
     <example xml:id="ex.admin.security.users.change_group">
      <title>Add User to Administrators Group</title>
  <screen>dn: cn=Administrators,ou=Groups,dc=infra,dc=caasp,dc=local
  changetype: modify
  add: uniqueMember
  uniqueMember: uid=<replaceable>USERID</replaceable><co xml:id="co.admin.security.users.add.admin"/>,ou=People,dc=infra,dc=caasp,dc=local</screen>
      <calloutlist>
       <callout arearefs="co.admin.security.users.add.admin">
        <para>
         <replaceable>USERID</replaceable> with the user's ID.
        </para>
       </callout>
      </calloutlist>
     </example>
    </step>
    <step>
     <para>
      Execute <command>ldapmodify</command>.
     </para>
<screen>&prompt.user;<command>ldapmodify -H ldap://<replaceable>ADMIN_NODE</replaceable>:389 -ZZ -D cn=admin,dc=infra,dc=caasp,dc=local \
    -w <replaceable>LDAP_ADMIN_PASSWORD</replaceable> -f <replaceable>LDIF_FILE</replaceable></command></screen>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec.admin.security.users.delete">
   <title>Deleting User</title>
    <para>
     The following procedure details how to delete a user from the
     LDAP database.
    </para>
    <procedure>
     <step>
      <para>
       Create an LDIF file that contains that specifies the distinguished
       name of the entry and a deletion command.
      </para>
<screen>dn: uid=<replaceable>USER_ID</replaceable>,ou=People,dc=infra,dc=caasp,dc=local
changetype: delete</screen>
     </step>
     <step>
      <para>
       Execute <command>ldapmodify</command>.
      </para>
<screen>&prompt.user;<command>ldapmodify -H ldap://<replaceable>ADMIN_NODE</replaceable>:389 -ZZ -D uid=<replaceable>USER_ID</replaceable>,ou=People,dc=infra,dc=caasp,dc=local \
    -w <replaceable>LDAP_ADMIN_PASSWORD</replaceable> -f <replaceable>LDIF_DELETE</replaceable></command></screen>
     </step>
    </procedure>
  </sect2>

  <sect2 xml:id="sec.admin.security.groups">
   <title>Adding New Group</title>
   <para>
    To grant users access to manage a single namespace in &kube;, first
    create your users as mentioned in <xref linkend=
    "sec.admin.security.users.add"/>. Then execute the following
    procedure.
   </para>
   <procedure>
    <step>
     <para>
       Create a LDIF file for a new group:
     </para>
     <example xml:id="ex.admin.security.groups">
      <title>LDIF File to Add a New Group</title>
<screen>dn: cn=<replaceable>group name</replaceable><co xml:id="co.admin.security.groups.cn"/>,ou=Groups,dc=infra,dc=caasp,dc=local
objectclass: top
objectclass: groupOfUniqueNames
cn: <replaceable>group name</replaceable><xref linkend="co.admin.security.groups.cn" xrefstyle="select:label nopage"/>
uniqueMember: uid=<replaceable>member1</replaceable>,<co xml:id="co.admin.security.groups.member"/>ou=People,dc=infra,dc=caasp,dc=local
uniqueMember: uid=<replaceable>member2</replaceable>,<xref linkend="co.admin.security.groups.member" xrefstyle="select:label nopage"/>ou=People,dc=infra,dc=caasp,dc=local
uniqueMember: uid=<replaceable>member3</replaceable>,<xref linkend="co.admin.security.groups.member" xrefstyle="select:label nopage"/>ou=People,dc=infra,dc=caasp,dc=local</screen>
      <calloutlist>
       <callout arearefs="co.admin.security.groups.cn">
        <para>
         The group's name.
        </para>
       </callout>
       <callout arearefs="co.admin.security.groups.member">
        <para>
         Members of the group. Repeat the <literal>uniqueMember</literal>
         attribute for every member of this group.
        </para>
       </callout>
      </calloutlist>
     </example>
    </step>
    <step>
     <para>
      Populate your <phrase role="productname">OpenLDAP</phrase> server
      with the LDIF file:
     </para>
<screen>&prompt.user;<command>ldapadd -H ldap://<replaceable>ADMINISTRATION_NODE_FQDN</replaceable>:389 -ZZ \
-D cn=admin,dc=infra,dc=caasp,dc=local -w <replaceable>LDAP_ADMIN_PASSWORD</replaceable> -f <replaceable>LDIF_FILE</replaceable></command></screen>
    </step>
   </procedure>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.admin.security.role">
  <title>Role Management</title>
  <para>
   &productname; uses <emphasis>role-based access control</emphasis>
   authorization for &kube;. Roles define, which
   <emphasis>subjects</emphasis> (users or groups) can use which
   <emphasis>verbs</emphasis> (operations) on
   <emphasis>resources</emphasis>. The following sections provide an
   overview of resources, verbs and how to create roles. Roles can
   then be assigned to users and groups.
  </para>
  <sect2 xml:id="sec.admin.security.role.verb">
   <title>List of Verbs</title>
   <para>
    This section provides an overview of the most common
    <emphasis>verbs</emphasis> (operations) used for defining roles.
    Verbs correspond to sub-commands of <command>kubectl</command>.
   </para>
   <variablelist>
    <varlistentry>
     <term>create</term>
     <listitem>
      <para>
       Create a resource.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>delete</term>
     <listitem>
      <para>
       Delete resources.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>deletecollection</term>
     <listitem>
      <para>
       Delete a collection of CronJob.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>get</term>
     <listitem>
      <para>
       Display individual resource.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>list</term>
     <listitem>
      <para>
       Display collections.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>patch</term>
     <listitem>
      <para>
       Update an API object in place.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>proxy</term>
     <listitem>
      <para>
       Allows running &kubectl; in a mode where it acts as a reverse
       proxy.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>update</term>
     <listitem>
      <para>
       Update fields of a resource, for example annotations or labels.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>watch</term>
     <listitem>
      <para>
       Watch resource.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
  <sect2 xml:id="sec.admin.security.role.resource">
   <title>List of Resources</title>
   <para>
    This section provides an overview of the most common
    <emphasis>resources</emphasis> used for defining roles.
   </para>
   <variablelist>
    <varlistentry>
     <term>Autoscaler</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/"
       />
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>ConfigMaps</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/"
       />
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Cronjob</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/"
       />
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>DaemonSet</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/"
       />
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Deployment</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://kubernetes.io/docs/concepts/workloads/controllers/deployment/"
       />
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Ingress</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://kubernetes.io/docs/concepts/services-networking/ingress/"
       />
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Job</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/"
       />
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Namespace</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
       />
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Node</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://kubernetes.io/docs/concepts/architecture/nodes/"
       />
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Pod</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/"
       />
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>PV</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://kubernetes.io/docs/concepts/storage/persistent-volumes/"
       />
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Secrets</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://kubernetes.io/docs/concepts/configuration/secret/"
       />
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Service</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://kubernetes.io/docs/concepts/services-networking/service/"
       />
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>ReplicaSets</term>
     <listitem>
      <para>
       <link xlink:href=
       "https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/"
       />
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
  <sect2 xml:id="sec.admin.security.role.create">
   <title>Create Role</title>
   <para>
    Roles are defined in YAML files. To apply role definitions to
    &kube;, use <command>kubectl apply -f
    <replaceable>YAML_FILE</replaceable></command>. The following
    examples provide an overview about different use cases of roles.
   </para>
   <example>
    <title>Simple Role for Core Resource</title>
    <para>
     This example allows to <literal>get</literal>, <literal>watch</literal>
     and <literal>list</literal> all <literal>pods</literal> in the
     namespace <literal>default</literal>.
    </para>
    <screen>kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: view-pods<co xml:id="co.admin.security.role.example1.name"/>
  namespace: default<co xml:id="co.admin.security.role.example1.namespace"/>
rules:
- apiGroups: [""]<co xml:id="co.admin.security.role.example1.apigroups"/>
  resources: ["pods"]<co xml:id="co.admin.security.role.example1.resources"/>
  verbs: ["get", "watch", "list"]<co xml:id="co.admin.security.role.example1.verbs"/></screen>
    <calloutlist>
       <callout arearefs="co.admin.security.role.example1.name">
        <para>
         Name of the role. This is required to associate the rule with
         a group or user. For details, refer to <xref linkend="sec.admin.security.role.create_binding" />.
        </para>
       </callout>
       <callout arearefs="co.admin.security.role.example1.namespace">
        <para>
         Namespace the new group should be allowed to access. Use
         <literal>default</literal> for &kube;' default namespace.
        </para>
       </callout>
       <callout arearefs="co.admin.security.role.example1.apigroups">
        <para>
         &kube; API groups. Use "" for the core group
         <literal>rbac.authorization.k8s.io</literal>.
        </para>
       </callout>
       <callout arearefs="co.admin.security.role.example1.resources">
        <para>
         &kube; resources. For a list of available resources, refer to
         <xref linkend="sec.admin.security.role.resource" />.
        </para>
       </callout>
       <callout arearefs="co.admin.security.role.example1.verbs">
        <para>
         &kube; verbs. For a list of available verbs, refer to
         <xref linkend="sec.admin.security.role.verb" />.
        </para>
       </callout>
    </calloutlist>
   </example>
   <example>
    <title>Clusterwide Creation of Pods</title>
    <para>
     This example allows to <literal>create</literal>
     <literal>pods</literal> clusterwide. Note the
     <literal>ClusterRole</literal> value for <option>kind</option>.
    </para>
    <screen>kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: admin-create-pods<co xml:id="co.admin.security.role.example2.name"/>
rules:
- apiGroups: [""]<co xml:id="co.admin.security.role.example2.apigroups"/>
  resources: ["pods"]<co xml:id="co.admin.security.role.example2.resources"/>
  verbs: ["create"]<co xml:id="co.admin.security.role.example2.verbs"/></screen>
    <calloutlist>
       <callout arearefs="co.admin.security.role.example2.name">
        <para>
         Name of the role. This is required to associate the rule with
         a group or user. For details, refer to <xref linkend="sec.admin.security.role.create_binding" />.
        </para>
       </callout>
       <callout arearefs="co.admin.security.role.example2.apigroups">
        <para>
         &kube; API groups. Use "" for the core group
         <literal>rbac.authorization.k8s.io</literal>.
        </para>
       </callout>
       <callout arearefs="co.admin.security.role.example2.resources">
        <para>
         &kube; resources. For a list of available resources, refer to
         <xref linkend="sec.admin.security.role.resource" />.
        </para>
       </callout>
       <callout arearefs="co.admin.security.role.example2.verbs">
        <para>
         &kube; verbs. For a list of available verbs, refer to
         <xref linkend="sec.admin.security.role.verb" />.
        </para>
       </callout>
    </calloutlist>
   </example>
  </sect2>
  <sect2 xml:id="sec.admin.security.role.create_binding">
   <title>Create Role Bindings</title>
   <para>
    To bind a group or user to a rule, create a YAML file that contains
    the role binding description. Then apply the binding with
    <command>kubectl apply -f
    <replaceable>YAML_FILE</replaceable></command>. The following
    examples provide an overview about different use cases of role
    bindings.
   </para>
   <example xml:id="ex.admin.security.groups.role">
    <title>Binding a Group to a Role</title>
    <para>
     This example shows how to bind a group to a defined role.
    </para>
<screen>kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: <replaceable>ROLE_BINDING_NAME</replaceable><co xml:id="co.admin.security.groups.role-binding-name"/>
  namespace: <replaceable>NAMESPACE</replaceable><co xml:id="co.admin.security.groups.role-namespace"/>
subjects:
- kind: Group
  name: <replaceable>LDAP_GROUP_NAME</replaceable><co xml:id="co.admin.security.groups.ldap-group-name"/>
  apiGroup: rbac.authorization.k8s.io
roleRef:
- kind: Role
  name: <replaceable>ROLE_NAME</replaceable><co xml:id="co.admin.security.groups.role-name"/>
  apiGroup: rbac.authorization.k8s.io</screen>
    <calloutlist>
     <callout arearefs="co.admin.security.groups.role-binding-name">
      <para>
       Defines a name for this new role binding.
      </para>
     </callout>
     <callout arearefs="co.admin.security.groups.role-namespace">
      <para>
       Name of the namespace for which the binding applies.
      </para>
     </callout>
     <callout arearefs="co.admin.security.groups.role-name">
      <para>
       Name of the role used. For defining rules, refer to
       <xref linkend="sec.admin.security.role.create" />.
      </para>
     </callout>
     <callout arearefs="co.admin.security.groups.ldap-group-name">
      <para>
       Name of the LDAP group to which this binding applies. For
       creating groups, refer to <xref linkend=
       "sec.admin.security.groups" />.
      </para>
     </callout>
    </calloutlist>
   </example>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.admin.security.audit">
  <title>Security Audit Log</title>

  <para>
   To enable the &kube; security audit log please see:
   <xref linkend="sec.admin.logging.kubernetes"/>
  </para>
 </sect1>
</chapter>
