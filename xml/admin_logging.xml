<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.1" xml:id="cha.admin.logging"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <title>Logging</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

 <important>
  <title>Scope Of This Document</title>
  <para>
   The scope of this document is limited to the &productname; Infrastructure
   layer.
  </para>
  <para>
   For information on how to access log files for the individual
   components, please refer to the respective official documentation of the
   component.
  </para>
 </important>

 <sect1 xml:id="sec.admin.logging.intro">
  <title>About &productname; Logging</title>
  <para>
   Logging across the cluster is done on multiple logical levels. You can think
   of them as four logical layers (simplified).
  </para>

   <itemizedlist>
    <listitem>
     <para>
      CaaSP Infrastructure (Salt, Velum, LDAP)
     </para>
     <itemizedlist>
      <listitem>
       <para>
        Cluster (kubelet, etcd, dex, flanneld, haproxy, tiller)
      </para>
      <itemizedlist>
       <listitem>
        <para>
         Pod (systemd, journald, dmesg)
       </para>
       <itemizedlist>
        <listitem>
         <para>
          Application
        </para>
       </listitem>
      </itemizedlist>
      </listitem>
     </itemizedlist>
     </listitem>
    </itemizedlist>
   </listitem>
  </itemizedlist>

  <para>
   The individual log files allow introspection of activities across the cluster.
   Due to some technical limitations it is sometimes not possible to directly
   trace log events from one level to the next. Most log files would be used for
   debugging purposes only.
  </para>
 </sect1>

 <sect1 xml:id="sec.admin.logging.admin">
  <title>Admin Node Logs</title>
  <para>
   More information to be added.
  </para>

  <sect2 xml:id="sec.admin.logging.velum">
   <title>&dashboard; Logs</title>
   <para>
    More information to be added.
   </para>
  </sect2>

  <sect2 xml:id="sec.admin.logging.ldap">
   <title>LDAP Logs</title>
   <para>
    &productname; &dashboard; uses OpenLDAP.
   </para>
   <para>
    More information to be added.
   </para>
  </sect2>
 </sect1>

 <sect1 xml:id="sec.admin.logging.salt">
  <title>Salt Logging</title>
  <para>
   <literal>Salt</literal> performs a variety of functions that control behavior
   and configuration the &kube; cluster. The health of the cluster relies on
   successful execution of <literal>Salt</literal> commands. You have three main
   sources for <literal>Salt</literal> related log information.
  </para>

  <sect2 xml:id="sec.admin.logging.salt.orchestration">
   <title>Salt Orchestration Log</title>
   <para>
    The <literal>Salt</literal> orchestration logs contains log entries about
    orchestration events that have changed the cluster.
   </para>
   <para>
    Orchestration events are
   </para>
   <itemizedlist>
    <listitem>
     <para>
      Bootstrapping
     </para>
    </listitem>
    <listitem>
     <para>
      Adding new nodes
     </para>
    </listitem>
    <listitem>
     <para>
      Removing nodes
     </para>
    </listitem>
    <listitem>
     <para>
      Updating settings
     </para>
    </listitem>
    <listitem>
     <para>
      Upgrading a cluster
     </para>
    </listitem>
   </itemizedlist>

<screen>&prompt.user;<command>docker exec -it $(docker ps | grep dashboard | awk '{print $1}') \
entrypoint.sh bundle \
exec rails runner 'puts(Minion.all.map(&amp;:to_yaml))' &gt; events.txt</command>

<command>/var/lib/supportutils-plugin-suse-caasp/debug-salt \
--json_output=events.txt \
--summary_output=events-summarized.txt \
--text-status \
--no-color</command>
         </screen>

   <para>
    Reading the <filename>events-summarized.txt</filename> file
    should be enough for detecting most (if not all) of the issues caused by
    <literal>Salt</literal>.
   </para>
  </sect2>

  <sect2 xml:id="sec.admin.logging.salt.master">
   <title>Salt Master Log</title>
   <para>
    Retrieve the <literal>Salt</literal> master logs. This doesn't usually
    provide much insight, but might contain some issues related to the
    <literal>salt-database</literal> connection.
   </para>

<screen>&prompt.user;<command>docker exec -it $(docker ps | grep salt-master | awk '{print $1}') \
cat /var/log/salt/master</command>
    </screen>

  </sect2>

  <sect2 xml:id="sec.admin.logging.salt.minion">
   <title>Salt Minion Logs</title>
   <para>
    Retrieve the <literal>salt-minion</literal> logs for all nodes. This will
    show all output for all <literal>salt-minions</literal> at once. Execute the
    following command on the admin node.
   </para>
   <para>
    Of course, it's possible to retrieve this information on any specific node
    by reading the <filename>/var/log/salt/minion</filename> file.
   </para>
<screen>
&prompt.user;<command>docker exec -it $(docker ps | grep salt-master | awk '{print $1}') \
salt '*' cmd.run "cat /var/log/salt/minion"</command>
    </screen>

  </sect2>
 </sect1>

 <sect1 xml:id="sec.admin.logging.transactional-updates">
  <title>Transactional Update Log</title>
  <para>
   In some cases, <command>transactional-update</command> can run into issues
   when creating new snapshots. These problems can stem from problems attempting
   to download packages from the update channels or when nodes run out of disk
   space.
  </para>

<screen>
&prompt.user;<command>docker exec -it $(docker ps | grep salt-master | awk '{print $1}') \
salt -P 'roles:(admin|kube-master|kube-minion)' \
cmd.run "journalctl -u transactional-update"</command>
 </screen>
 </sect1>

 <sect1 xml:id="sec.admin.logging.fluentd">
  <title>External log collection (fluentd)</title>
  <para>
   There's a notable exception at infra level, and is that we allow audit logs
   to be configured from within Velum. This allows the audit logs to be written
   on the &kube; master nodes at <filename>/var/log/kube-apiserver/audit.log</filename>
   and an external data collector (continuous reading) like <literal>fluentd</literal>
   can be used to collect all the audit logs.
  </para>

  <para>
   At &kube; level, there are different solutions that can be implemented, for example: <literal>fluentd</literal>
   can be used to collect all applications log in a central instance (https://docs.fluentd.org/v0.12/articles/kubernetes-fluentd).
   Then, Elasticsearch and Kibana can be used (https://kubernetes.io/docs/tasks/debug-application-cluster/logging-elasticsearch-kibana/)
   to have an intuitive way to interact with the logs.

   https://docs.fluentd.org/v0.12/articles/kubernetes-fluentd
  </para>
 </sect1>

 <sect1 xml:id="sec.admin.logging.log-levels">
  <title>Log levels</title>
  <para>
   There are two main components and their respective sub-components that
   allow configuration of different loglevels: Salt and &kube;.
  </para>

  <itemizedlist>

   <listitem>
    <para>
     Salt
    </para>
     <itemizedlist>
      <listitem>
       <para>
        Salt master
       </para>
       </listitem>
       <listitem>
        <para>
         Salt minion on each machine
        </para>
       </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
     <para>
      &kube;
     </para>
     <itemizedlist>
      <listitem>
       <para>
        Master nodes
       </para>
       <itemizedlist mark="circle">
        <listitem>
         <para>
          apiserver
         </para>
        </listitem>
        <listitem>
         <para>
          controller-manager
         </para>
        </listitem>
        <listitem>
         <para>
          scheduler
         </para>
        </listitem>
       </itemizedlist>
      </listitem>

      <listitem>
       <para>
        All nodes
       </para>
       <itemizedlist mark="circle">
        <listitem>
         <para>
          kubelet
         </para>
        </listitem>
        <listitem>
         <para>
          kube proxy
         </para>
        </listitem>
        </itemizedlist>
      </listitem>
     </itemizedlist>
    </listitem>
  </itemizedlist>

  <sect2 xml:id="sec.admin.logging.log-levels.salt">
   <title>Salt Log Levels</title>

   <para>
    Salt provides different loglevels that apply both to the master and the
    minions.
   </para>

   <itemizedlist>
    <listitem>
     <para>
      all
     </para>
    </listitem>
    <listitem>
     <para>
      garbage
     </para>
    </listitem>
    <listitem>
     <para>
      trace
     </para>
    </listitem>
    <listitem>
     <para>
      debug
     </para>
    </listitem>
    <listitem>
     <para>
      profile
     </para>
    </listitem>
    <listitem>
     <para>
      info
     </para>
    </listitem>
    <listitem>
     <para>
      warning
     </para>
    </listitem>
    <listitem>
     <para>
      error
     </para>
    </listitem>
    <listitem>
     <para>
      critical
     </para>
    </listitem>
    <listitem>
     <para>
      quiet
     </para>
    </listitem>
   </itemizedlist>

   <para>
   For detailed explanations of the usage of these log levels please see:
   <link xlink:href="https://docs.saltstack.com/en/latest/ref/configuration/logging/">Salt Log Levels (Upstream)</link>
   </para>

   <sect3 xml:id="sec.admin.logging.log-levels.salt.debug">
    <title>Setting a different log level</title>
    <para>
    When debugging issues, <literal>debug</literal> is usually enough and is
    what the &productname; engineers use to debug problems.
    </para>

    <sect4 xml:id="sec.admin.logging.log-levels.salt.debug.master">
     <title>Salt Master</title>

    <para>
     In the case of the <literal>salt-master</literal>, this configuration can be
     modified in the admin node, at <filename>/etc/caasp/salt-master-custom.conf</filename>.
     Inside this file you can add: <literal>log_level: debug</literal>.
    </para>

    <para>
     Note that after any change on this file you need to restart the
     <literal>salt-master</literal> container, like:
    </para>
<screen>
<command>docker rm -f $(docker ps | grep salt-master | awk '{print $1}')</command>.
     </screen>

    <para>
     After deleting this container, the <literal>kubelet</literal> will bring a
     new <literal>salt-master</literal> container automatically with the new
     configuration applied. So you can check the logs with the
     <literal>debug</literal> loglevel.
     </para>

<screen>
<command>docker logs -f $(docker ps | grep salt-master | awk '{print $1}')</command>
   </screen>
  </sect4>

  <sect4 xml:id="sec.admin.logging.log-levels.salt.debug.minion">
   <title>Salt Minions</title>
   <note>
    <title>Modifications on Salt minions are not persistent</title>
    <para>
     These changes are discarded when the node is updated with a new snapshot by
     <literal>transactional-update</literal>.
    </para>
  </note>
   <para>
    In the case of the <literal>Salt</literal> minions, there's no "official"
    way to tweak this configuration, however, a new file can be added on the
    minion that you want to print debugging <literal>Salt</literal> information
    in: <filename>/etc/salt/minion.d/100-debug.conf</filename>. After doing a
    <command>systemctl restart salt-minion</command> you can check that it now
    prints debugging information with <command>journalctl -fu salt-minion</command>.
   </para>

  </sect4>
  </sect3>
  </sect2>

  <sect2 xml:id="sec.admin.logging.log-levels.kubernetes">
   <title>&kube; Log Levels</title>
   <para>
    For &kube; our default <literal>loglevel</literal> is <literal>2</literal>
    <link xlink:href="https://kubernetes.io/docs/reference/kubectl/cheatsheet/#kubectl-output-verbosity-and-debugging">Kubernetes Upstream: Output Verbosity and Debugging</link>.
    However, this setting can be tweaked by using pillar overrides. If modified,
    this setting will be applied to all &kube; components; there's no way to set
    a different loglevel per components. Moreover, there is no way to specify
    different loglevels per machine.
   </para>
  </sect2>

 </sect1>
</chapter>
